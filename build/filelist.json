[{"file":"moving-to-react.md","name":"moving-to-react","title":"Moving to React and Webpack","date":"2015-11-29T00:57:19.000Z","mdate":"2015-12-07T04:06:46.000Z","content":"\nWell, the first thing to say is why. I don't update this blog so often, why don't keep it just like it is? Because I started it as a way to learn, more than a real publishing platform and now I want to have some practice on React (I use Angular at my job).\n\nI like Angular, but React seems to me a more natural approach for building apps. All the idea about directives, controllers and services is good, but not very functional if you think about it. I mean, functional in the terms of functional programming.\n\nReact combined with Reactive Extensions seems a more natural environment for functional programming.\n\nOther reasons are:\n\n* I want to use Webpack and its hot loading, IE6 and TypeScript support, as well as its packaging capabilities.\n* Configuring Webpack with Angular 1.x is a bit tricky and full of magic. I have a very bad memory and always forget what is happening behind all this magic tools with magic words as \"ng-inject\" in the middle of the file. This makes me a bit unconfortable with Angular/Webpack.\n* Configuring React with Webpack seems to be a lot more natural. No need for extra tricks. Tests  with Webpack/React seem to be also easier to configure.\n* I'm starting some experiments with SVG manipulation and Angular directives cause a lot of console errors when rendering SVGs, something related to the template being loaded before being processed. I don't see that kind of errors in React (probably I'll see others, but till now, all looks good).\n\n## What are the steps to do it?\n\n* Configure Webpack and webpack server. If possible, I want to avoid creating a full Node.js/Express min app, but I'm thinking it can be needed\n* Recreate all my old directives as React components\n* Rectreate the logic to load the list of posts and covert it into a Webpack loader\n\nI'm thinking that some extra features I can add to this blog can be done as Webpack loaders or npm scripts. Among the things I want to add:\n\n* Tests and tests reports\n* Test coverage reports\n* Duplicated code reports\n\nSome other nice to have features:\n\n* Sequence diagrams in markdown correctly rendered\n\n### Configure Webpack and webpack server\n\nAs I was thinking, at the end I needed to use a node/express app as my develop entry point.\n\nAt my `package.json` I have these scripts:\n\n\t\"scripts\": {\n\t\t// For when we need to package the app:\n\t    \"build\": \"webpack -p\",\n\t\t// Develop mode will run a node app:\n\t    \"start\": \"node server.js\"\n\t  }\n\nThen, for the `server.js` file:\n\n\tvar express = require('express');\n\tvar path = require('path');\n\tvar httpProxy = require('http-proxy');\n\n\tvar proxy = httpProxy.createProxyServer();\n\tvar app = express();\n\n\tvar port =  3000;\n\n\t// We point our static assets to a dummy folder, so that when requesting for /build/* node doesn't use the built\n\t// files in the real folder.\n\tvar publicPath = path.resolve(__dirname, 'tmp');\n\tapp.use('/', express.static(publicPath));\n\n\t// As we are using a dummy folder as our root, we need to set the path for index.html and other files explicitly.\n\t// This is a bit of an issue, but I'm not expecting to add many static files anyway.\n\tapp.get('/', function(request, response){\n\t    response.sendFile(path.resolve(__dirname, 'index.html'));\n\t});\n\tapp.get('/ico32.png', function(request, response){\n\t    response.sendFile(path.resolve(__dirname, 'ico32.png'));\n\t});\n\n\trequire('./webpack.server.js')();\n\n\t// Any requests to localhost:3000/build is proxied\n\t// to webpack-dev-server\n\tapp.all('/build/*', function (req, res) {\n\t    proxy.web(req, res, {\n\t        target: 'http://localhost:8080'\n\t    });\n\t});\n\n\t// It is important to catch any errors from the proxy or the\n\t// server will crash. An example of this is connecting to the\n\t// server when webpack is bundling\n\tproxy.on('error', function(e) {\n\t    console.log('Could not connect to proxy, please try again...');\n\t});\n\n\t// And run the server\n\tapp.listen(port, function () {\n\t    console.log('Node server running at port %s and Webpack Server running at por 8080.', port);\n\t});\n\nWe'll need also a manual setup for Webpack as we are not using the default server:\n\n\tvar webpack = require('webpack');\n\tvar webpackDevServer = require('webpack-dev-server');\n\tvar webpackConfig = require('./webpack.config.js');\n\n\tmodule.exports = function () {\n\n\t    // First we fire up Webpack an pass in the configuration we\n\t    // created\n\t    var bundleStart = null;\n\t    var compiler = webpack(webpackConfig);\n\n\t    // We give notice in the terminal when it starts bundling and\n\t    // set the time it started\n\t    compiler.plugin('compile', function() {\n\t        console.log('[Webpack] Bundling...');\n\t        bundleStart = Date.now();\n\t    });\n\n\t    // We also give notice when it is done compiling, including the\n\t    // time it took. Nice to have\n\t    compiler.plugin('done', function() {\n\t        console.log('[Webpack] Bundled in ' + (Date.now() - bundleStart) + 'ms!');\n\t    });\n\n\t    var bundler = new webpackDevServer(compiler, {\n\n\t        // We need to tell Webpack to serve our bundled application\n\t        // from the build path. When proxying:\n\t        // http://localhost:3000/build -> http://localhost:8080/build\n\t        publicPath: '/build/',\n\n\t        // Configure hot replacement\n\t        hot: true,\n\n\t        // The rest is terminal configurations\n\t        quiet: false,\n\t        noInfo: true,\n\t        stats: {\n\t            colors: true\n\t        }\n\t    });\n\n\t    // We fire up the development server and give notice in the terminal\n\t    // that we are starting the initial bundle\n\t    bundler.listen(8080, 'localhost', function () {\n\t        console.log('[Webpack] Bundling project, please wait...');\n\t    });\n\n\t};\n\nAfter this, almost everything will work as in any Webpack tutorial.\n\n### Recreate all my old directives as React components\n\nWebpack is running and my app is pretty much broken. I see only a blank page. Now we need to start loading a bunch of things.\n\nIn my old *post* directive, I was supporting HTML posts, which I don't really use and can be an issue. I'm not supporting them any more.\n\nIntsead of using the jQuery like API to insert the content of my posts after rendering the HTML from the MD files, I'm using the method `dangerouslySetInnerHTML` from React, that makes me think that I should find a clenaer why to solve this need.\n\n\t// Angular\n\t// Somehow you get access to the element object.\n\tvar html = $sanitize(markdown.render(content));\n\telement.html(html);\n\t\n\t// React\n\tlet html = { __html: new MD().render(post.content) };\n\t// In the virtual DOM\n\t<div className=\"postContent\" dangerouslySetInnerHTML={html}></div>\n\nAnother important thing is that, because I don't have anymore the `$HTTP` object form Angular, now I'm relying on the `fetch` method and its polyfill.\n\nThis was pretty easy to use in combination with RxJS:\n\n\tRx.Observable\n\t.fromPromise(fetch('build/filelist.json'))\n\t.flatMap( p => p.json());\n\nI moved some of the logic to a Webopack plugin, now I'm generating the list of files and extracting the title in this step, instead of doing extra processing in the browser that was also not the cleanest solution.\n"},{"file":"math-js-libraries.md","name":"math-js-libraries","title":"Math JavaScript Libraries","date":"2015-06-06T18:55:38.000Z","mdate":"2015-06-06T22:34:50.000Z","content":"\nData visualization is very related, if not the same to data manipulation. In most of the cases, data visualization tools will handle all the maths and transformations needed to present your data on the screen, but there are times, many in deed if you are working on a data intensive project, were just sending the data to the charting library as it is coming from the data base or an API is not enough. Of course you can go with your own functions, but before taking that path, or because you are taking it, having other tools as reference can be useful. Here are some.\n\n\n## lodash\n\nIt is probably the best array manipulation library out there. Even if you are writing your own tool, using lodash as a dependency for your library is worth to consider. Even if it is not all about math (it has some handy math methods in the latest versions) it is probably the best swiss knife you can get when handling data sets.\n\nIt was based originally in [Underscore](http://underscorejs.org/), a very known library, but has evolved into a much better replacement for it, at least thatâ€™s my opinion, you can try both and use whatever you like more.\n\nIn case you are interested in a more serious comparison between both, you can read [Underscore vs Lo-Dash](http://benmccormick.org/2014/11/12/underscore-vs-lodash/)\n\n[lodash.com](https://lodash.com/)\n\n## Sylvester\n\nThis one is a linear algebra library dedicated to Vector and Matrix manipulation.\n\n[sylvester.jcoglan.com](http://sylvester.jcoglan.com/)\n\n## jStat\n\nAnother linear algebra library with a good amount of statistical analysis methods.\n\n[jstat.github.io](http://jstat.github.io/)"},{"file":"js-complexity-analysis.md","name":"js-complexity-analysis","title":"JavaScript Complexity Analysis","date":"2015-05-30T05:35:17.000Z","mdate":"2015-05-30T05:35:17.000Z","content":"\nSo far I have found two alternatives for doing complexity analysis in JavaScript code.\n\nThe first one is [complexity-report](https://github.com/philbooth/complexity-report) that uses [escomplex](https://github.com/philbooth/escomplex) behind the scenes and generates a nice report that can be customized with some CSS. \n\nThe other one is [plato](https://github.com/es-analysis/plato) that also uses escomplex but that generates a very nice report including code pointers and charts. It is important to note that Plato uses the same options that complexity-report does.\n\nThere are some other tools listed in escomplex GitHub read me file, but the one I tested and liked more is plato.\n\nAs Iâ€™m already using [Grunt](http://gruntjs.com/) I installed [grunt-plato](https://github.com/jsoverson/grunt-plato) that is maintained by the same guys that work on plato (I know that now there is all this debate about getting rid of Grunt or Gulp, and there is also the battle between Grunt and Gulp, but in my case, using Grunt was simpler). \n\nThe fist step, of course, is install the task tool:\n\n    npm install grunt-plato â€”save-dev\n\nThen you need to update your `Gruntfile.js`:\n\n    plato: {\n            my_page: {\n                files: { 'plato-report': ['src/**/*.js'] }\n            }\n        }\n\nAnd thatâ€™s pretty much all, at least with the default configuration.\n\nThe generated report looks like [this one](/plato-report/index.html) (this is the actual report for my page, this page). "},{"file":"data-visualization-js-libraries.md","name":"data-visualization-js-libraries","title":"Data Visualization JavaScript Libraries","date":"2015-05-23T06:07:33.000Z","mdate":"2015-12-02T23:59:14.000Z","content":"\n\nA good part of my job is related to data visualization in a web application. As probably you know, the most common approach to this problem is to draw the graphical artifacts on the browser, removing load from the servers and giving much more control of the visualization to the front end developers and to the user, as they can now interact with the data. Drawing charts on the browser can be done in only one way, using JavaScript (of course you can use Flash or try Silverlight, but allow me to ignore them during this article), and because doing it all from scratch is not advisable, you will end up using a JavaScript library.\n\nThis is a short list of JavaScript (or Typescript) libraries that I have found in my safaris across the web, some of them I have used, some others I want to try, and there is also the ones I just want to know about. Almost all of them have been open tabs in my browser for months, waiting for me to have some extra time to experiment with them. Today I'm closing these tabs and listing them all here with some notes for my self that hopefully can be useful to others too.\n\n \n## Highcharts\n\n![Area Chart](/img/highcharts.jpg)\n\nThis one is probably one of the most famous ones. It is commercial but has a pretty good amount of features and if your company can afford the license price, it is probably a good option to bring to the table.\n\nThey offer two versions of their product, the regular one, known simply as Highcharts, that is also the one where more customization can be done, and Highstock, specialized in multi charts and time series.\n   \nThey also offer a minimalist version of their charts to be used as a sparklines.\n\n[highcharts.com](http://www.highcharts.com/)\n\n \n## Plottable\n\n![Bar Chart](/img/plottable.jpg)\n\nA neat and clean library built on top of [D3](http://d3js.org). It offers the basic charts: bars, lines and scatters. Even if not important for their users, it is nice to know that it is written in [Typescript](http://www.typescriptlang.org/).\n\n[plottablejs.org](http://plottablejs.org/)\n\n\n## Chart.js\n\n[chart.js](http://www.chartjs.org/)\nTODO: Add description and immage.\n\n\n## Chartist\n\n[gionkunz.github.io/chartist-js](http://gionkunz.github.io/chartist-js/)\nTODO: Add description and immage.\n\n\n## React Sparklines\n\n[borisyankov.github.io/react-sparklines](http://borisyankov.github.io/react-sparklines/)\nTODO: Add description and immage.\n\n\n## React Paths-js\n\n[rsamec.github.io/react-pathjs-chart](http://rsamec.github.io/react-pathjs-chart/)\nTODO: Add description and immage.\n\n\n## Paths.js\n\n[andreaferretti.github.io/paths-js-demo](http://andreaferretti.github.io/paths-js-demo/)\nTODO: Add description and immage.\n\n\n## Victory\n\n[projects.formidablelabs.com/victory](http://projects.formidablelabs.com/victory/)\nTODO: Add description and immage.\n\n\n## Datakit\n\n![Line Chart](/img/datakit.jpg)\n\nThis one is a much more than a chart library. It also includes some useful features for data analysis as reading data from different sources and statistical methods.\n\n[github.com/NathanEpstein/datakit](https://github.com/NathanEpstein/datakit)\n\n\n## Envision and Flotr2\n\n![Area Chart with Zoom](/img/envisionjs.jpg)\n\nEnvision is mainly focused on time series, offers simple but well presented charts. It has a nice mode for zooming in and out and for moving the window of visualization across time series (Highstock offers the same feature).\n\nIt also support very customized charting, as their fractal example shows.\n\n[www.humblesoftware.com/envision](http://www.humblesoftware.com/envision)\n\nEnvision is built on the top of Flor2, maintained by the same company and offering an extendable platform for creating charts.\n\n[www.humblesoftware.com/flotr2](http://www.humblesoftware.com/flotr2/)\n\n\n\n\n## JointJS\n\n![Line Chart](/img/jointjs.jpg)\n\nIt covers a very good amount of different needs, from UML to Petri nets, including chess diagrams and organizational charts. It is part of a biggest software that provides a diagramming editor online. The editor has a commercial license, but the library is open source and you can use it for free.\n\n[jointjs.com](http://jointjs.com/)\n\n\n## dimple\n\n![Line Chart](/img/dimplejs.jpg)\n\nWorks on top of [D3](http://d3js.org) and claims to provide an easy API for creating charts hiding the complexity of D3.\nThe charts styles on this library are one of the cleanest you can get, a ver well implemented graphic design for data visualization.\n\n[dimplejs.org](http://dimplejs.org/)\n\n\n## MetricsGraphics\n\n![Area Chart](/img/metricsgraphics.jpg)\n\nAnother library on the top of [D3](http://d3js.org) that also offers neat charts with a minimalistic design. Iâ€™m not sure I like how it handles the axis, but if you are a fan of Tufte, probably youâ€™ll like it.\n\n[metricsgraphicsjs.org](http://metricsgraphicsjs.org/)\n\n\n## nvd3\n\n![Area Chart](/img/nvd3.jpg)\n\nThis one is also built on top of [D3](http://d3js.org). It offers a nice amount of different charts. The generated chart can be sometimes messy, but something you can live with.\n\n[nvd3.org](http://nvd3.org/)\n\n\n## Flot\n\n![Combined Chart](/img/flot.jpg)\n\nCreated as a jQuery library to support data visualization. Used in some other data intensive tools as [Grafana](http://grafana.org/). \n\n[flotcharts.org](http://www.flotcharts.org/)\n\n\n## C3\n\nAnother tool based on the top of [D3](http://d3js.org). I has a quite friendly API and a nice presentation; mainly useful if you are adding or removing data dynamically from your charts. Not a huge amount of flexibility on the presentation, but if you are more focused on dynamic loading/unloading and donâ€™t want to do a lot of coding, this tool is quite efficient.\n\n[c3js.org](http://c3js.org/)\n\n\n## Project EON\n\nThis tool is build on the top of [C3](http://c3js.org/), and can be seen also as part of the [D3](http://d3js.org) family. It offers a nice API (inherited from the also simple API from C3) for handling dynamic data for real time presentations.\n\n_Unrelated note: Its web site is a bit overloaded and it is not recomendable to leave it there as an open tab for centuries unless you want to find it dead as it happened to me._\n\n[pubnub.com/developers/eon](http://www.pubnub.com/developers/eon/)\n\n\n## d3-timeline\n\n[github.com/jiahuang/d3-timeline](https://github.com/jiahuang/d3-timeline)\nTODO: Add description and immage.\n\n\n## Why not D3\n\nThere is nothing wrong with [D3](http://d3js.org), actually, it is probably the most complete set of tools for creating visualizations with JavaScript. But in my personal opinion, it is  very generic and it is far from being a domain specific solution. \n\nYou can create a domain specific solution on the top of D3, and many libraries are doing that, but using it without any helping library can become a hard task.\n\nWhen you are visualizing data, you donâ€™t want to invest tons of hours creating charts, you want to work with your data and analyze it with the help of your visualizations; that is why I believe that using a chart specific tool is a better idea than playing directly with D3 or [Rafael](http://raphaeljs.com/), as well as playing these tools is huge better than drawing yourself on a canvas element.\n\nOn the other hand, if you are doing your own visualization library, or you want a super customized visualization, looking into a generic tool like D3 can be a wise idea.\n\n\n## Some other folks talking about the same things:\n\nWell, it is not just that they also talk about the same things, but that they are experts on the field (which I am not).\n\n[Edward Tufte](http://www.edwardtufte.com/tufte/index) is an essential reference on the data visualization world. If you donâ€™t know him, try to google his name and look around of what people says about him and of course, what he himself have and is saying. In my opinion, his *data ink ratio* and the *sparklines* are two of the most interesting ideas in data visualization. His most known work is [The Visual Display of Quantitative Information](http://www.amazon.com/gp/product/0961392142/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0961392142&linkCode=as2&tag=wigahlukblog-20&linkId=6M4GTOWCQXDBDM4U).\n\n[The Functional Art: An introduction to information graphics and visualization](http://www.amazon.com/gp/product/0321834739/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321834739&linkCode=as2&tag=wigahlukblog-20&linkId=SSXTTBZHZB3JFAWH) is a must read if you are in the data visualization world. Available in [Safari](my.safaribooksonline.com).\n\n[Jim Vallandingham](http://vallandingham.me/) has a very interesting blog about visualization and data processing.\n\n[The Why Axis](http://thewhyaxis.info/) is a blog from [Bryan Connor](http://www.bryanconnor.com/) dedicated to data visualization.\n"},{"file":"autogenerate-the-index-of-posts.md","name":"autogenerate-the-index-of-posts","title":"Autogenerate the Index of Posts","date":"2015-05-18T05:46:47.000Z","mdate":"2015-05-18T05:46:47.000Z","content":"\nThe next feature I want to add is actually not a change on the usability of this site, but on my own usability. \nWriting manually the list of entries each time I add something is not very fun. What I want is to write the articles and \nthen the machine to generate the index of entries for me.\n\nThese are the things I need to do:\n\n* Read the files in a certain directory\n* Generate a JSON file with some metadata for each file: Creation date, title, path.\n* Update my post service to use the generated index file.\n* Update everything else to use this new capability.\n\nDone! :)\n\nI started with npm alone, but after struggling a bit with it and the minification and generation of files, I ended up \nconfiguring Grunt for the project.\n \nNow I'll start adding all my files to the minification list. But for now, I'm good. \n"},{"file":"creating-my-own-showdown-directive.md","name":"creating-my-own-showdown-directive","title":"Creating my own Showdown directive","date":"2015-05-15T06:01:24.000Z","mdate":"2015-12-02T01:25:09.000Z","content":"\nI was using, as I mentioned earlier, the _btford_ angular-markdown-directive and it was working pretty nice, until I tried to include some HTML code in my markdown files. Looking into the directives code, I noticed that it was using `ng-include` as the mechanism to retrieve the markdown files.\n\nWhen Angular 1.x loads the content using `ng-include`, it is applying what they call\n[\"Strict Contextual Escaping\"](https://docs.angularjs.org/api/ng/service/$sce) and it was escaping my HTML tags.\n\nAs there was not an easy solution that prevented this escaping, I decided to create my own directive and use the `$http` module for loading my files.\n\nI have a problem focusing on a single thing and it is pretty common that I get distracted in the middle of my way. \nThat's what happened this time. Once I started planning for my new directive I started thinking on what were the features\nI would like to have on it:\n \n* Being able to define the content through a directive parameter. This was my main use case as I was also building my own service for handling my articles. I know I said I wanted a very simple thing at the beginning, but adding dates on each HTML entry was becoming difficult for a distracted person like me, even with a couple of articles :P \n* Support urls for and download the remote content. Supposing that the content is coming from a trusted source that support `CORS`.\n* Support embedded content into the same directive, something similar to this: `<ng-showdown>#My Title</ng-showdown>`\n\nSo, after defining my requirements, more than what I really needed in fact, I started coding my directive. The one that now I'm using here :)\n\nAt the end, I was able to support the following cases:\n\n    <ng-showdown>Inserting markdown in the HTML</ng-showdown>\n    <ng-showdown source=\"myScopeVariable\"></ng-showdown>\n    <ng-showdown href=\"myurl.md\"></ng-showdown>\n    \nThe last thing I needed was to be able to add some extra post processing before any rendering.\nI added an extra parameter called `onLoad` that expects a function like:\n \n    function myHandler (data, xhr) {}\n    \nWhere `data` is the content of the file and `xhr` is the _xhr_ object from the _jQuery_ Ajax call.\n\nAs an extra feature, I changed a bit the styling of the site. It still needs some refactoring though, but now it doesn't looks as old fashion as before :)\n\n## Update (06/06/15):\n\nAfter some issues with Showdown as my rendering engine for markdown I decided to look for some other tools. This is what I found:\n\n### [Showdown](https://github.com/showdownjs/showdown)\n\nThis was my original engine, and it is actually pretty nice to use for some basic needs, but it does the rendering applying a chain of global replacements using regular expressions that use the full text every time. If you are interested in adding some extensions, it can cause an issue on performance, besides the fact that if you are not careful, you can modify the output of another transformation.\n\n### [markded](https://github.com/chjj/marked)\n\nThis is probably the fastest markdown tool you will find for JavaScript, but because it is so optimized, it doesnâ€™t allow extensions and customization seems to need a complete fork of the code.\n\n### [Markdown-it](https://github.com/markdown-it/markdown-it)\n\nThis one is my new choice. It is not as fast as markded but it does a pretty decent job. It is also easy to extend and has a good amount of options to customize the rendering. The same as marked, it doesnâ€™t apply brute force on the replacements, instead, it creates a tree of tokens that afterwards processed in a render. Accordingly to their authors, it is derived from Remarkable.\n\n### [Remarkable](https://github.com/jonschlinkert/remarkable)\n\nIt is one of the most mentioned parsers out there. I haven't tried it, but many tutorials have a reference to it. They have a nice demo of the functionality and seems pretty well documented. This library seems to have a good number of plugins, it is also parsing and creating a syntax tree, as Markdown-it. (Added to this list on 12/01/15)\n\n### [markdown-js](https://github.com/evilstreak/markdown-js)\n\nAnother nice tool with a three steps process. Tokenize and parse into  (JsonML)[http://www.jsonml.org/] , convert to an HTML tree and generate the HTML string. It was my second choice. I decided not to use it because Markdown-it had much more extensions already done.\n\n### [text.js](https://github.com/sheremetyev/texts.js)\n\nAnother option, if you are interested in a more generic solution that can be used to render HTML, XeLaTex and Pandoc, using a very similar format to (JsonML)[http://www.jsonml.org/] as its internal representation. It doesnâ€™t support the full Markdown specification, but the subset it does is enough for almost all cases.\n\n### [pdfmake](http://pdfmake.org/)\n\nThis is not a Markdown tool, but a PDF render with basic functionality that can be combined with any of the tools that generate intermediate formats as (JsonML)[http://www.jsonml.org/]. Iâ€™m adding it to the list because I donâ€™t have one for PDF generators.\n"},{"file":"adding-support-for-reading-a-single-file.md","name":"adding-support-for-reading-a-single-file","title":"Adding support for reading a single file","date":"2015-05-08T05:03:25.000Z","mdate":"2015-05-08T05:03:25.000Z","content":"\nI know this sounds a bit trivial, and in fact it is, all blogs I know support single file visualization. Why this small\napp not too?\n\nThe first thing I need to confess is that I started this as an exercise to teach someone how an angular app looks like,\nand so I wanted a very small and limited version. This is my forth post here, and I think it is time now to build a very\nbasic functionality to support this very basic feature.\n \nMy posts at this point in time are just MD files. I have a controller with tags and each tag has a reference to the file\nit should render. It looks like this:\n\n    <post timestamp=\"12/21/2014\" file=\"implicit-read-write-objects-play-2.3\"></post>\n    \nI know it is pretty basic, and probably more basic than that, but as I said, this was more a demo than a real blog,\nand it is still just a nice demo, no more than that so far.\n\nThe first problem I have is not really related to this task, but to the markdown directive I'm using that depends on Angular\nng-include to load files. This is not ideal as it is sanitizing the HTML code I'm adding to this post. So, lets do a short \npause to fix that building my own directive for using Showdown.\n \nDone. After this small debrief, lets continue with the implementation for single post viewer.\n\nThe first thing: Add an extra controller for posts and use the post directive I already have with the modified Showdown\ndirective.\n\nThe next step was just adding an extra path to the _$routeProvider_.\n\nNow I need to use this new feature. The simplest way is just to add a link to the title of each article. Nothing fancy right?\n\nWell, the main problem is that the HTML generated by Showdown is not part of the angular process, so I need to find the\nfirst H1 element and wrap it with the anchor with the old jquery style programming :(\n  \nDone! Now I have a single post view that works with a nice URL. I don't like the implementation too much, but lets think\nof it as a first version :)\n\n"},{"file":"implicit-read-write-objects-play-2.3.md","name":"implicit-read-write-objects-play-2.3","title":"Implicit read and write objects for JSON in Play 2.3","date":"2014-12-22T00:33:37.000Z","mdate":"2014-12-22T00:33:37.000Z","content":"\nLast week I was trying to have a prototype working in Scala/Play 2.3 framework. All was quite nice and my first steps on\nScala were not so difficult until I tried to use the [JSON Macro Inception](https://www.playframework.com/documentation/2.3.x/ScalaJsonInception)\nfunctionality.\n\nThe documentation was clear enough for the simple examples they had, but I was unable to make it work on my code. My example is not complicated\neither:\n\n    case class TimeSeriesData (Response: Response)\n    case class Response(TimeUnit: List[Long], stats: Stats)\n    case class Stats(data: List[Data])\n    case class Data(identifier: Identifier, metric: List[Metric])\n    case class Identifier(names: List[String], values: List[String])\n    case class Metric(env: String, name: String, values: List[Double])\n    \nbut I was getting an error all the time:\n\n    play.PlayExceptions$CompilationException: Compilation error[No implicit Reads for assets.{some_class} available.]\n\nAfter looking into a lot of places and trying all kind of superstitious ideas (as often I start having after some time of \ndealing with errors I don't quite understand) I finally realized that the problem was the order in which you declare your implicit objects.\n\n**Every implicit object declared should not be used in any previous declaration but can be used in any further one.**\n\n    implicit val metricReads = Json.reads[Metric]\n    implicit val identifierReads = Json.reads[Identifier]\n    implicit val dataReads = Json.reads[Data]\n    implicit val statsReads = Json.reads[Stats]\n    implicit val responseReads = Json.reads[Response]\n    implicit val timeSeriesDataReads = Json.reads[TimeSeriesData]\n\nAnd that's all! The implicit objects with the JSON Macro Inception works awesomely!"},{"file":"setting-up-this-thing.md","name":"setting-up-this-thing","title":"Setting up this thing","date":"2014-12-21T23:32:26.000Z","mdate":"2014-12-21T23:32:26.000Z","content":"\nI'm starting this... thing. I've started some other blogs, personal pages, etc. in the past. Fore some reason I've never \nmaintained them in a regular way.\n\nI think probably my old blog at _Wordpress_ was the one where I wrote more on but then, once I saw it\nwithout being signed in and saw a lot of advertisements (not really a lot, but more than what I liked) I lost the interest on it.\n\nThen I tried _tumblr_, _blogger_, _twitter_ (I know it's not the same) and for some reason I don't get really involved with them.\n\nThere are no guaranties that this quasi blog at github will have a better luck, we'll see. There are some things I like so far:\n\n* I can write code directly\n* I can have a source control on it\n* I can have branches\n* I can iterate on it\n\nSo this is pretty much as my first post here. I want to add some more stuff, mainly, I want to be able to write my posts\nusing markdown instead of pure HTML, and also have some nice styles for them including something for dates (this post has no timestamp\nnor any other fancy metadata :( ).\n\nJust as a quick note, right now, this blog-like is done as an _[angular](https://angularjs.org/)_ application deployed as a\n[gitHub page](https://pages.github.com/). I'm using [Bootstrap](http://getbootstrap.com/) for my basic styles, [google fonts](http://www.google.com/fonts) and\n[philbit svg patterns](http://philbit.com/svgpatterns/) for the background images.\n\nLets try to add some MD support for this rudimentary blog-like thing.\n\nFirst TODO, find a library. Done: _[angular-markdown-directive](https://github.com/btford/angular-markdown-directive)_. This one works perfect for what I want to do.\n\nNow, replace the about page with the `README.md` content. Done.\n\nNow, lets suppose there are a lot of articles, well, not a lot, but some of them, and that they have the basic metadata, as a timestamp.\n\nI did some styling out of the plan. Changing fonts here and there, now lets back to the plan. Convert this text into an MD file. Done.\n\nLets create a very simple directive for posts (BTW it is nicer to write texts in MD format than in HTML). Done.\n\nI'm not sure I want to support comments and all these fancy features a common blog has. For now, this blog is pretty unknown and is more an exercise and a toy than a real\npublishing platform.\n\nNext thing was to create a nicer directive for book recommendations. That's done. I need to write some of them now :)."},{"file":"adding-google-ax.md","name":"adding-google-ax","title":"Adding Google Analytics","date":"2014-12-14T05:44:57.000Z","mdate":"2014-12-14T05:44:57.000Z","content":"\nI decided to start a new post but continue writing about the process of creating this blog-like thing because now I'll\nintegrate some other services that are not completely related to the code and infrastructure I need for this application\nbut rather are more like accessories.\n  \nI already had an account for google analytics, so the natural next step was to create a new property.\n  \nThe next step: embed the javascript code for this to work.\n\nFinally, because this app is an _angular_ app, I needed a way to track page interactions for a it. I'm using\n[angulartics](http://luisfarzati.github.io/angulartics/). For now, I'll keep the very basic configuration."}]
